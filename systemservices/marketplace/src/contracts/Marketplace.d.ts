/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";
import { EventData } from "web3-eth-contract/types";

export class Marketplace {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  // _address: string;
  options: contractOptions;
  methods: {
    isPauser(account: string): TransactionObject<boolean>;

    services(
      arg0: number | string
    ): TransactionObject<{
      owner: string;
      sid: string;
      price: string;
      0: string;
      1: string;
      2: string;
    }>;

    isServiceOwner(serviceIndex: number | string): TransactionObject<boolean>;

    isServiceSidExist(sid: (string | number[])): TransactionObject<boolean>;

    isServiceHashExist(hash: string | number[]): TransactionObject<boolean>;

    getServiceVersion(
      serviceIndex: number | string,
      versionIndex: number | string
    ): TransactionObject<{
      hash: string;
      url: string;
      0: string;
      1: string;
    }>;

    getServicePayment(
      serviceIndex: number | string,
      paymentIndex: number | string
    ): TransactionObject<string>;

    getServiceIndex(sid: (string | number[])): TransactionObject<string>;

    getServiceVersionIndex(
      serviceIndex: number | string,
      hash: string | number[]
    ): TransactionObject<string>;

    getServicePaymentIndex(
      serviceIndex: number | string,
      purchaser: string
    ): TransactionObject<string>;

    getServiceVersionsCount(
      serviceIndex: number | string
    ): TransactionObject<string>;

    getServicePaymentsCount(
      serviceIndex: number | string
    ): TransactionObject<string>;

    hasPaid(serviceIndex: number | string): TransactionObject<boolean>;

    unpause(): TransactionObject<void>;

    renouncePauser(): TransactionObject<void>;

    renounceOwnership(): TransactionObject<void>;

    addPauser(account: string): TransactionObject<void>;

    pause(): TransactionObject<void>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    createService(
      sid: (string | number[]),
      price: number | string
    ): TransactionObject<string>;

    transferServiceOwnership(
      serviceIndex: number | string,
      newOwner: string
    ): TransactionObject<void>;

    changeServicePrice(
      serviceIndex: number | string,
      newPrice: number | string
    ): TransactionObject<void>;

    createServiceVersion(
      serviceIndex: number | string,
      hash: string | number[],
      url: (string | number[])
    ): TransactionObject<string>;

    pay(serviceIndex: number | string): TransactionObject<string>;

    paused(): TransactionObject<boolean>;
    owner(): TransactionObject<string>;
    isOwner(): TransactionObject<boolean>;
    token(): TransactionObject<string>;
    getServicesCount(): TransactionObject<string>;
  };
  // deploy(options: {
  //   data: string;
  //   arguments: any[];
  // }): TransactionObject<Contract>;
  events: {
    ServiceCreated(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    ServiceOwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    ServicePriceChanged(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    ServiceVersionCreated(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    ServicePaid(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    Paused(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    Unpaused(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    PauserAdded(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    PauserRemoved(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
  ): Promise<EventData[]>;
  // setProvider(provider: Provider): void;
  clone(): Marketplace;
}
