// Code generated by mockery v1.0.0. DO NOT EDIT.

package serviceapi

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockServiceServer is an autogenerated mock type for the ServiceServer type
type MockServiceServer struct {
	mock.Mock
}

// EmitEvent provides a mock function with given fields: _a0, _a1
func (_m *MockServiceServer) EmitEvent(_a0 context.Context, _a1 *EmitEventRequest) (*EmitEventReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EmitEventReply
	if rf, ok := ret.Get(0).(func(context.Context, *EmitEventRequest) *EmitEventReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EmitEventReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EmitEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListenTask provides a mock function with given fields: _a0, _a1
func (_m *MockServiceServer) ListenTask(_a0 *ListenTaskRequest, _a1 Service_ListenTaskServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ListenTaskRequest, Service_ListenTaskServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitResult provides a mock function with given fields: _a0, _a1
func (_m *MockServiceServer) SubmitResult(_a0 context.Context, _a1 *SubmitResultRequest) (*SubmitResultReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *SubmitResultReply
	if rf, ok := ret.Get(0).(func(context.Context, *SubmitResultRequest) *SubmitResultReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SubmitResultReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SubmitResultRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
