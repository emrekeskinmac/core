// Code generated by mockery v1.0.0. DO NOT EDIT.

package coreapi

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockCoreServer is an autogenerated mock type for the CoreServer type
type MockCoreServer struct {
	mock.Mock
}

// DeleteService provides a mock function with given fields: _a0, _a1
func (_m *MockCoreServer) DeleteService(_a0 context.Context, _a1 *DeleteServiceRequest) (*DeleteServiceReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteServiceReply
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteServiceRequest) *DeleteServiceReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteServiceReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteServiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployService provides a mock function with given fields: _a0
func (_m *MockCoreServer) DeployService(_a0 Core_DeployServiceServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(Core_DeployServiceServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteTask provides a mock function with given fields: _a0, _a1
func (_m *MockCoreServer) ExecuteTask(_a0 context.Context, _a1 *ExecuteTaskRequest) (*ExecuteTaskReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ExecuteTaskReply
	if rf, ok := ret.Get(0).(func(context.Context, *ExecuteTaskRequest) *ExecuteTaskReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ExecuteTaskReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ExecuteTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: _a0, _a1
func (_m *MockCoreServer) GetService(_a0 context.Context, _a1 *GetServiceRequest) (*GetServiceReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetServiceReply
	if rf, ok := ret.Get(0).(func(context.Context, *GetServiceRequest) *GetServiceReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetServiceReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetServiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: _a0, _a1
func (_m *MockCoreServer) ListServices(_a0 context.Context, _a1 *ListServicesRequest) (*ListServicesReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ListServicesReply
	if rf, ok := ret.Get(0).(func(context.Context, *ListServicesRequest) *ListServicesReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListServicesReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ListServicesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListenEvent provides a mock function with given fields: _a0, _a1
func (_m *MockCoreServer) ListenEvent(_a0 *ListenEventRequest, _a1 Core_ListenEventServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ListenEventRequest, Core_ListenEventServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListenResult provides a mock function with given fields: _a0, _a1
func (_m *MockCoreServer) ListenResult(_a0 *ListenResultRequest, _a1 Core_ListenResultServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ListenResultRequest, Core_ListenResultServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceLogs provides a mock function with given fields: _a0, _a1
func (_m *MockCoreServer) ServiceLogs(_a0 *ServiceLogsRequest, _a1 Core_ServiceLogsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ServiceLogsRequest, Core_ServiceLogsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartService provides a mock function with given fields: _a0, _a1
func (_m *MockCoreServer) StartService(_a0 context.Context, _a1 *StartServiceRequest) (*StartServiceReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *StartServiceReply
	if rf, ok := ret.Get(0).(func(context.Context, *StartServiceRequest) *StartServiceReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StartServiceReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *StartServiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopService provides a mock function with given fields: _a0, _a1
func (_m *MockCoreServer) StopService(_a0 context.Context, _a1 *StopServiceRequest) (*StopServiceReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *StopServiceReply
	if rf, ok := ret.Get(0).(func(context.Context, *StopServiceRequest) *StopServiceReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StopServiceReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *StopServiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
